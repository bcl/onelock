
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
00001100 l    d  .text	00000000 
00000200 l    d  .data	00000000 
00000c00 l    d  .bootloader	00000000 
00001000 l    d  .infomem	00000000 
00001000 l    d  .infomemnobits	00000000 
00000200 l    d  .bss	00000000 
00000208 l    d  .noinit	00000000 
0000ffe0 l    d  .vectors	00000000 
00000000 l    d  .stab	00000000 
00000000 l    d  .stabstr	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
0000012e l       *ABS*	00000000 TAIV
00000160 l       *ABS*	00000000 TACTL
00000162 l       *ABS*	00000000 TACCTL0
00000164 l       *ABS*	00000000 TACCTL1
00000166 l       *ABS*	00000000 TACCTL2
00000170 l       *ABS*	00000000 TAR
00000172 l       *ABS*	00000000 TACCR0
00000174 l       *ABS*	00000000 TACCR1
00000176 l       *ABS*	00000000 TACCR2
00000162 l       *ABS*	00000000 CCTL0
00000164 l       *ABS*	00000000 CCTL1
00000166 l       *ABS*	00000000 CCTL2
00000172 l       *ABS*	00000000 CCR0
00000174 l       *ABS*	00000000 CCR1
00000176 l       *ABS*	00000000 CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000190 l       *ABS*	00000000 TBR
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000004 l       *ABS*	00000000 ME1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 main.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001240 l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 interrupts.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
000012e2 l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 dco.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
0000136c l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 onewire.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
000014ba l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
000014be l       .text	00000000 __stop_progLoop
00001120  w      .text	00000000 _clear_bss_init__
00000200 g     O .bss	00000002 VZC_2delta
0000137c g     F .text	00000040 ow_reset
000012e0 g     F .text	00000002 INT_nmi
000014c2 g       .text	00000000 _etext
000012aa g     F .text	00000002 INT_uart1rx
000014ba g       .text	00000000 __stop_progExec__
0000113a g       .text	00000000 _unexpected_1_
0000113a  w      .text	00000000 vector_ffe0
0000117c g     F .text	00000026 InitDCO
00000206 g     O .bss	00000002 VZC_LastCap
000012d0 g     F .text	00000002 INT_timera0
00000202 g     O .bss	00000001 Status
000012de g     F .text	00000002 INT_timerb0
000012d0 g       .text	00000000 vector_ffec
000012d4 g       .text	00000000 vector_fff0
0000141c g     F .text	0000005e ow_read
000012a6 g     F .text	00000002 INT_port2
0000113a g       .text	00000000 __dtors_end
00000208 g       .bss	00000000 __bss_end
000012e0 g       .text	00000000 vector_fffc
000012d2 g     F .text	00000002 INT_adc
000012a8 g       .text	00000000 vector_ffe4
000012a8 g     F .text	00000002 INT_uart1tx
000012da g     F .text	00000002 INT_compa
0000ffe0 g     O .vectors	00000020 InterruptVectors
000013bc g     F .text	00000060 ow_write
000012ac g     F .text	00000002 INT_port1
00000204 g     O .bss	00000002 Rsel
00001136  w      .text	00000000 _end_of_init__
000012dc g     F .text	00000002 INT_timerb1
000012d6 g     F .text	00000002 INT_uart0rx
000012a6 g       .text	00000000 vector_ffe2
000012ac g       .text	00000000 vector_ffe8
0000113e  w      .text	00000000 _unexpected_
000012de g       .text	00000000 vector_fffa
00001100 g       .text	00000000 _reset_vector__
0000113a g       .text	00000000 __ctors_start
0000116e g     F .text	0000000e InitOSC
00000200 g       .bss	00000000 __bss_start
000012d2 g       .text	00000000 vector_ffee
000012d8 g       .text	00000000 vector_fff4
000011a2 g     F .text	0000009e main
00001240 g     F .text	00000066 InitIRQ
000012dc g       .text	00000000 vector_fff8
000012d6 g       .text	00000000 vector_fff2
00010000 g       .vectors	00000000 _vectors_end
000012aa g       .text	00000000 vector_ffe6
00001140 g     F .text	00000012 delay
000012ae g     F .text	00000022 INT_timera1
00001152 g     F .text	0000001c InitPorts
000012e2 g     F .text	00000032 Rsel_set
0000147a g     F .text	00000040 ow_read_rom
0000113a g       .text	00000000 __dtors_start
0000113a g       .text	00000000 __ctors_end
00000a00 g       *ABS*	00000000 __stack
000012d8 g     F .text	00000002 INT_wdt
00000200 g       .data	00000000 _edata
00000208 g       .noinit	00000000 _end
00001314 g     F .text	00000058 dco_step
000012da g       .text	00000000 vector_fff6
0000136c g     F .text	00000010 ow_delay
00001106  w      .text	00000000 _copy_data_init__
000012d4 g     F .text	00000002 INT_uart0tx
00000200 g       .data	00000000 __data_start
000012ae g       .text	00000000 vector_ffea


Disassembly of section .text:

00001100 <_reset_vector__>:
    1100:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    1104:	20 01 

00001106 <_copy_data_init__>:
    1106:	3f 40 c2 14 	mov	#5314,	r15	;#0x14c2
    110a:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    110e:	3d 40 00 02 	mov	#512,	r13	;#0x0200
    1112:	0d 9e       	cmp	r14,	r13	;
    1114:	05 24       	jz	$+12     	;abs 0x1120
    1116:	fe 4f 00 00 	mov.b	@r15+,	0(r14)	;
    111a:	1e 53       	inc	r14		;
    111c:	0e 9d       	cmp	r13,	r14	;
    111e:	fb 2b       	jnc	$-8      	;abs 0x1116

00001120 <_clear_bss_init__>:
    1120:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    1124:	3d 40 08 02 	mov	#520,	r13	;#0x0208
    1128:	0d 9f       	cmp	r15,	r13	;
    112a:	05 24       	jz	$+12     	;abs 0x1136
    112c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00
    1130:	1f 53       	inc	r15		;
    1132:	0f 9d       	cmp	r13,	r15	;
    1134:	fb 2b       	jnc	$-8      	;abs 0x112c

00001136 <_end_of_init__>:
    1136:	30 40 a2 11 	br	#0x11a2		;

0000113a <__ctors_end>:
    113a:	30 40 3e 11 	br	#0x113e		;

0000113e <_unexpected_>:
    113e:	00 13       	reti			

00001140 <delay>:
Delay function.
   ----------------------------------------------------------------------- */
void delay(unsigned int d) {
   int i;
   for (i = 0; i<d; i++) {
    1140:	0e 43       	clr	r14		;
    1142:	0e 9f       	cmp	r15,	r14	;
    1144:	05 2c       	jc	$+12     	;abs 0x1150
      nop();
    1146:	03 43       	nop			
      nop();
    1148:	03 43       	nop			
    114a:	1e 53       	inc	r14		;
    114c:	0e 9f       	cmp	r15,	r14	;
    114e:	fb 2b       	jnc	$-8      	;abs 0x1146
   }
}
    1150:	30 41       	ret			

00001152 <InitPorts>:


void InitPorts( void )
{
  /* Initialize the ports */
  P1OUT  = P1OUT_INIT;                //Init output data of port1
    1152:	c2 43 21 00 	mov.b	#0,	&0x0021	;r3 As==00
  P2OUT  = P2OUT_INIT;                //Init output data of port2
    1156:	c2 43 29 00 	mov.b	#0,	&0x0029	;r3 As==00

  P1SEL  = P1SEL_INIT;                //Select port or module -function on port1
    115a:	c2 43 26 00 	mov.b	#0,	&0x0026	;r3 As==00
  P2SEL  = P2SEL_INIT;                //Select port or module -function on port2
    115e:	c2 43 2e 00 	mov.b	#0,	&0x002e	;r3 As==00

  P1DIR  = P1DIR_INIT;                //Init port direction register of port1
    1162:	f2 40 fd ff 	mov.b	#-3,	&0x0022	;#0xfffd
    1166:	22 00 
  P2DIR  = P2DIR_INIT;                //Init port direction register of port2
    1168:	f2 43 2a 00 	mov.b	#-1,	&0x002a	;r3 As==11
}
    116c:	30 41       	ret			

0000116e <InitOSC>:

void InitOSC( void )
{
    /* Clear OSC Fault */
    IE1 = 0x00;
    116e:	c2 43 00 00 	mov.b	#0,	&0x0000	;r3 As==00
    IFG1 = 0x00;
    1172:	c2 43 02 00 	mov.b	#0,	&0x0002	;r3 As==00
    
    /* Select DCO/1 as MCLK */
    BCSCTL2 = 0x00;
    1176:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
}
    117a:	30 41       	ret			

0000117c <InitDCO>:

void InitDCO( void )
{
    /* Setup the DCO frequency */
    Rsel = RSEL_NOM;
    117c:	a2 42 04 02 	mov	#4,	&0x0204	;r2 As==10
    Rsel_set( Rsel );
    1180:	2f 42       	mov	#4,	r15	;r2 As==10
    1182:	b0 12 e2 12 	call	#4834		;#0x12e2
    
    /* Setup for ACLK/8 */
    BCSCTL1 |= DIVA_DIV8;
    1186:	f2 d0 30 00 	bis.b	#48,	&0x0057	;#0x0030
    118a:	57 00 

    /* Diagnostic */
    /* Output SMCLK on P1.4 pin 16 f149 */
    P1SEL |= 0x10;
    118c:	f2 d0 10 00 	bis.b	#16,	&0x0026	;#0x0010
    1190:	26 00 
    P1DIR |= 0x10;
    1192:	f2 d0 10 00 	bis.b	#16,	&0x0022	;#0x0010
    1196:	22 00 
    
    /* Output ACLK on P2.0 pin 20 f149 */
    P2SEL |= 0x01;
    1198:	d2 d3 2e 00 	bis.b	#1,	&0x002e	;r3 As==01
    P2DIR |= 0x01;
    119c:	d2 d3 2a 00 	bis.b	#1,	&0x002a	;r3 As==01
}
    11a0:	30 41       	ret			

000011a2 <main>:



/* -----------------------------------------------------------------------
   Main function with a blinking LED
   ----------------------------------------------------------------------- */
int main(void)
{
    11a2:	31 40 f8 09 	mov	#2552,	r1	;#0x09f8
    short i;
    unsigned int success;
    short adj_timer;
    unsigned char sn[8];		/* 1-wire serial number 	*/
    
    /* Watchdog disabled */
    WDTCTL = WDTPW|WDTHOLD;
    11a6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    11aa:	20 01 

    Status = 0;
    11ac:	c2 43 02 02 	mov.b	#0,	&0x0202	;r3 As==00

    InitPorts();
    11b0:	b0 12 52 11 	call	#4434		;#0x1152
    InitOSC();
    11b4:	b0 12 6e 11 	call	#4462		;#0x116e
    InitDCO();
    11b8:	b0 12 7c 11 	call	#4476		;#0x117c
    InitIRQ();
    11bc:	b0 12 40 12 	call	#4672		;#0x1240

    P1OUT &= ~0x01;
    11c0:	d2 c3 21 00 	bic.b	#1,	&0x0021	;r3 As==01
    adj_timer = DCO_ADJ_TIME;
    11c4:	29 43       	mov	#2,	r9	;r3 As==10
    11c6:	36 40 14 13 	mov	#4884,	r6	;#0x1314
    11ca:	38 40 7c 13 	mov	#4988,	r8	;#0x137c
    11ce:	37 40 7a 14 	mov	#5242,	r7	;#0x147a
    while (1) {                         //main loop, never ends...
      if( Status & TASK_OVR )
    11d2:	5f 42 02 02 	mov.b	&0x0202,r15	;0x0202
    11d6:	1f f3       	and	#1,	r15	;r3 As==01
    11d8:	04 24       	jz	$+10     	;abs 0x11e2
      {
        if( --adj_timer == 0 )
    11da:	39 53       	add	#-1,	r9	;r3 As==11
    11dc:	29 24       	jz	$+84     	;abs 0x1230
        {
          dco_step();
          adj_timer = DCO_ADJ_TIME;
          P1OUT &= ~0x01;
        }
        Status &= ~TASK_OVR; 
    11de:	d2 c3 02 02 	bic.b	#1,	&0x0202	;r3 As==01
      }

      if( !(P1IN & 0x02) )
    11e2:	5f 42 20 00 	mov.b	&0x0020,r15	;0x0020
    11e6:	2f f3       	and	#2,	r15	;r3 As==10
    11e8:	f4 23       	jnz	$-22     	;abs 0x11d2
      {
        success = 0;
    11ea:	0a 4f       	mov	r15,	r10	;
        for(i=0;i<8;i++)
    11ec:	0b 4f       	mov	r15,	r11	;
    11ee:	3e 40 07 00 	mov	#7,	r14	;#0x0007
        {
          sn[i] = 0;
    11f2:	0f 41       	mov	r1,	r15	;
    11f4:	0f 5b       	add	r11,	r15	;
    11f6:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00
    11fa:	1b 53       	inc	r11		;
    11fc:	0e 9b       	cmp	r11,	r14	;
    11fe:	f9 37       	jge	$-12     	;abs 0x11f2
        }
        for(i=0;(i<5) && !success;i++)
    1200:	0b 43       	clr	r11		;
    1202:	0a 9b       	cmp	r11,	r10	;
    1204:	e6 23       	jnz	$-50     	;abs 0x11d2
        {
          if( ow_reset() )
    1206:	88 12       	call	r8		;
    1208:	0f 93       	cmp	#0,	r15	;r3 As==00
    120a:	07 20       	jnz	$+16     	;abs 0x121a
    120c:	1b 53       	inc	r11		;
    120e:	3b 90 05 00 	cmp	#5,	r11	;#0x0005
    1212:	df 37       	jge	$-64     	;abs 0x11d2
    1214:	0a 93       	cmp	#0,	r10	;r3 As==00
    1216:	f7 27       	jz	$-16     	;abs 0x1206
    1218:	dc 3f       	jmp	$-70     	;abs 0x11d2
          {
            /* Turn on the LED */
//            P1OUT |= 0x01;
              
            /* Go Read the 1-wire serial number */
            ow_read_rom( sn );
    121a:	0f 41       	mov	r1,	r15	;
    121c:	87 12       	call	r7		;
 
 
            if( sn[0] == 0x21 )
    121e:	f1 90 21 00 	cmp.b	#33,	0(r1)	;#0x0021
    1222:	00 00 
    1224:	02 24       	jz	$+6      	;abs 0x122a
            {
              P1OUT |= 0x01;
            }
 
            /* Check checksum */
 
            /* Check against the access list */
              
            /* Unlock the lock */
            
            
            success = 1;
    1226:	1a 43       	mov	#1,	r10	;r3 As==01
    1228:	f1 3f       	jmp	$-28     	;abs 0x120c
    122a:	d2 d3 21 00 	bis.b	#1,	&0x0021	;r3 As==01
    122e:	fb 3f       	jmp	$-8      	;abs 0x1226
    1230:	86 12       	call	r6		;
    1232:	29 43       	mov	#2,	r9	;r3 As==10
    1234:	d2 c3 21 00 	bic.b	#1,	&0x0021	;r3 As==01
    1238:	d2 3f       	jmp	$-90     	;abs 0x11de
          } /* presence */
        } /* for loop */
      }
    }
}
    123a:	31 52       	add	#8,	r1	;r2 As==11
    123c:	30 40 ba 14 	br	#0x14ba		;

00001240 <InitIRQ>:
{
  short i;
  
  /* Setup Timer A0 run off MCLK /1, continuous up count, start */
  TACTL = TASSEL_SMCLK | TACLR;
    1240:	b2 40 04 02 	mov	#516,	&0x0160	;#0x0204
    1244:	60 01 
  TACTL |= MC_CONT;
    1246:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    124a:	60 01 
  
  /* Setup CCR2 */
  CCTL2 = CM_POS|CCIS_1|SCS|CAP|OUTMOD_SET;
    124c:	b2 40 20 59 	mov	#22816,	&0x0166	;#0x5920
    1250:	66 01 

  /* Delay a bit for ACLK to settle */
  for (i = 0; i<0x1000; i++)
    1252:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
  {
    nop();
    1256:	03 43       	nop			
    1258:	03 43       	nop			
    125a:	03 43       	nop			
    125c:	03 43       	nop			
    125e:	03 43       	nop			
    1260:	03 43       	nop			
    1262:	03 43       	nop			
    1264:	03 43       	nop			
    1266:	03 43       	nop			
    1268:	03 43       	nop			
    126a:	03 43       	nop			
    126c:	03 43       	nop			
    126e:	03 43       	nop			
    1270:	03 43       	nop			
    1272:	03 43       	nop			
    1274:	03 43       	nop			
    1276:	03 43       	nop			
    1278:	03 43       	nop			
    127a:	03 43       	nop			
    127c:	03 43       	nop			
    127e:	03 43       	nop			
    1280:	03 43       	nop			
    1282:	03 43       	nop			
    1284:	03 43       	nop			
    1286:	03 43       	nop			
    1288:	03 43       	nop			
    128a:	03 43       	nop			
    128c:	03 43       	nop			
    128e:	03 43       	nop			
    1290:	03 43       	nop			
    1292:	03 43       	nop			
    1294:	03 43       	nop			
    1296:	3f 50 e0 ff 	add	#-32,	r15	;#0xffe0
    129a:	dd 23       	jnz	$-68     	;abs 0x1256
  }
  /* Enable CCTL2 interrupt */
  CCTL2 |= CCIE;
    129c:	b2 d0 10 00 	bis	#16,	&0x0166	;#0x0010
    12a0:	66 01 

  _EINT();
    12a2:	32 d2       	eint			
}
    12a4:	30 41       	ret			

000012a6 <INT_port2>:




interrupt (PORT2_VECTOR) INT_port2( void )
{
    12a6:	00 13       	reti			

000012a8 <INT_uart1tx>:
}

interrupt (UART1TX_VECTOR) INT_uart1tx( void )
{
    12a8:	00 13       	reti			

000012aa <INT_uart1rx>:
}

interrupt (UART1RX_VECTOR) INT_uart1rx( void )
{
    12aa:	00 13       	reti			

000012ac <INT_port1>:
}

interrupt (PORT1_VECTOR) INT_port1( void )
{
    12ac:	00 13       	reti			

000012ae <INT_timera1>:
} 

/* -----------------------------------------------------------------------
   Measure the 1/2 period of the 32.768KHz xtal
   ----------------------------------------------------------------------- */
interrupt (TIMERA1_VECTOR) INT_timera1( void )
{
    12ae:	0f 12       	push	r15		;
  if( TAIV == 0x04 )
    12b0:	a2 92 2e 01 	cmp	#4,	&0x012e	;r2 As==10
    12b4:	0b 20       	jnz	$+24     	;abs 0x12cc
  {
    /* CCR2 Interrupt */
    
    /* Measure the 32.768KHz period */
    VZC_2delta = CCR2 - VZC_LastCap;
    12b6:	1f 42 76 01 	mov	&0x0176,r15	;0x0176
    12ba:	1f 82 06 02 	sub	&0x0206,r15	;0x0206
    12be:	82 4f 00 02 	mov	r15,	&0x0200	;
    VZC_LastCap = CCR2;
    12c2:	92 42 76 01 	mov	&0x0176,&0x0206	;0x0176
    12c6:	06 02 
    Status |= TASK_OVR;
    12c8:	92 d3 02 02 	bis	#1,	&0x0202	;r3 As==01
  }
}
    12cc:	3f 41       	pop	r15		;
    12ce:	00 13       	reti			

000012d0 <INT_timera0>:

interrupt (TIMERA0_VECTOR) INT_timera0( void )
{
    12d0:	00 13       	reti			

000012d2 <INT_adc>:
}

interrupt (ADC_VECTOR) INT_adc( void )
{
    12d2:	00 13       	reti			

000012d4 <INT_uart0tx>:
}

interrupt (UART0TX_VECTOR) INT_uart0tx( void )
{
    12d4:	00 13       	reti			

000012d6 <INT_uart0rx>:
}

interrupt (UART0RX_VECTOR) INT_uart0rx( void )
{
    12d6:	00 13       	reti			

000012d8 <INT_wdt>:
}

interrupt (WDT_VECTOR) INT_wdt( void )
{
    12d8:	00 13       	reti			

000012da <INT_compa>:
}

interrupt (COMPARATORA_VECTOR) INT_compa( void )
{
    12da:	00 13       	reti			

000012dc <INT_timerb1>:
}

interrupt (TIMERB1_VECTOR) INT_timerb1( void )
{
    12dc:	00 13       	reti			

000012de <INT_timerb0>:
}

interrupt (TIMERB0_VECTOR) INT_timerb0( void )
{
    12de:	00 13       	reti			

000012e0 <INT_nmi>:
}

interrupt (NMI_VECTOR) INT_nmi( void )
{
    12e0:	00 13       	reti			

000012e2 <Rsel_set>:
/* -----------------------------------------------------------------------
   Adjust the DCO resistor selection in streps until it is at rsel
   ----------------------------------------------------------------------- */
void Rsel_set( short rsel )
{
    12e2:	0e 4f       	mov	r15,	r14	;
  while( (BCSCTL1 & 0x07) != rsel )
    12e4:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    12e8:	3f f0 07 00 	and	#7,	r15	;#0x0007
    12ec:	0f 9e       	cmp	r14,	r15	;
    12ee:	0e 24       	jz	$+30     	;abs 0x130c
  {
    if( (BCSCTL1 & 0x07 ) > rsel )
    12f0:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    12f4:	3f f0 07 00 	and	#7,	r15	;#0x0007
    12f8:	0e 9f       	cmp	r15,	r14	;
    12fa:	09 34       	jge	$+20     	;abs 0x130e
    {
      BCSCTL1 -= 1;
    12fc:	f2 53 57 00 	add.b	#-1,	&0x0057	;r3 As==11
    1300:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    1304:	3f f0 07 00 	and	#7,	r15	;#0x0007
    1308:	0f 9e       	cmp	r14,	r15	;
    130a:	f2 23       	jnz	$-26     	;abs 0x12f0
    } else {
      BCSCTL1 += 1;
    }
  }
}
    130c:	30 41       	ret			
    130e:	d2 53 57 00 	inc.b	&0x0057		;
    1312:	f6 3f       	jmp	$-18     	;abs 0x1300

00001314 <dco_step>:


/* -----------------------------------------------------------------------
   Adjust the DCO using step method
   ----------------------------------------------------------------------- */
void dco_step( void )
{
    if( DCOCTL == DCO_MAX )
    1314:	f2 90 e2 ff 	cmp.b	#-30,	&0x0056	;#0xffe2
    1318:	56 00 
    131a:	1e 24       	jz	$+62     	;abs 0x1358
    {
      /* Increment Rsel */
      if( (BCSCTL1 & 0x07)  < 0x07 )
      {
        BCSCTL1 += 1;
        DCOCTL = 0x60;
      } 
    } else if( DCOCTL == DCO_MIN ) {
    131c:	f2 90 05 00 	cmp.b	#5,	&0x0056	;#0x0005
    1320:	56 00 
    1322:	0e 24       	jz	$+30     	;abs 0x1340
      /* Decrement Rsel */
      if( (BCSCTL1 & 0x07) > 0x00 )
      {
        BCSCTL1 -= 1;
        DCOCTL = 0x60;
      } 
    } else {
      if( VZC_2delta < FSET )
    1324:	b2 90 f4 00 	cmp	#244,	&0x0200	;#0x00f4
    1328:	00 02 
    132a:	03 2c       	jc	$+8      	;abs 0x1332
      {
        DCOCTL += 1;
    132c:	d2 53 56 00 	inc.b	&0x0056		;
      } else if( VZC_2delta > FSET ) {
        DCOCTL -= 1;
      }    
    }
}
    1330:	30 41       	ret			
    1332:	b2 90 f5 00 	cmp	#245,	&0x0200	;#0x00f5
    1336:	00 02 
    1338:	02 28       	jnc	$+6      	;abs 0x133e
    133a:	f2 53 56 00 	add.b	#-1,	&0x0056	;r3 As==11
    133e:	30 41       	ret			
    1340:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    1344:	3f f0 07 00 	and	#7,	r15	;#0x0007
    1348:	1f 93       	cmp	#1,	r15	;r3 As==01
    134a:	f9 3b       	jl	$-12     	;abs 0x133e
    134c:	f2 53 57 00 	add.b	#-1,	&0x0057	;r3 As==11
    1350:	f2 40 60 00 	mov.b	#96,	&0x0056	;#0x0060
    1354:	56 00 
    1356:	30 41       	ret			
    1358:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    135c:	3f f0 07 00 	and	#7,	r15	;#0x0007
    1360:	3f 90 07 00 	cmp	#7,	r15	;#0x0007
    1364:	ec 37       	jge	$-38     	;abs 0x133e
    1366:	d2 53 57 00 	inc.b	&0x0057		;
    136a:	f2 3f       	jmp	$-26     	;abs 0x1350

0000136c <ow_delay>:
void ow_delay( unsigned int d )
{
  unsigned int i;

  for( i=0; i<d; i++ )
    136c:	0e 43       	clr	r14		;
    136e:	0e 9f       	cmp	r15,	r14	;
    1370:	04 2c       	jc	$+10     	;abs 0x137a
  {
    asm("  nop");
    1372:	03 43       	nop			
    1374:	1e 53       	inc	r14		;
    1376:	0e 9f       	cmp	r15,	r14	;
    1378:	fc 2b       	jnc	$-6      	;abs 0x1372
  }
}
    137a:	30 41       	ret			

0000137c <ow_reset>:


/* -----------------------------------------------------------------------
   1-wire reset and presence detection

   return 0 no presence detected
   return 1 presence detected
   ----------------------------------------------------------------------- */
int ow_reset( void )
{
    137c:	0b 12       	push	r11		;
    137e:	0a 12       	push	r10		;
  int status;
  

  _DINT();
    1380:	32 c2       	dint			
  /* Pull the 1-wire bus low for 500uS */
  P1OUT &= ~0x02;
    1382:	e2 c3 21 00 	bic.b	#2,	&0x0021	;r3 As==10
  P1DIR |= 0x02;
    1386:	e2 d3 22 00 	bis.b	#2,	&0x0022	;r3 As==10
  
  ow_delay( D500US );
    138a:	3a 40 6c 13 	mov	#4972,	r10	;#0x136c
    138e:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    1392:	8a 12       	call	r10		;
  
  /* Allow resistor to pull it high */
  P1DIR &= ~0x02;
    1394:	e2 c3 22 00 	bic.b	#2,	&0x0022	;r3 As==10

  /* Delay 100uS before testing for presence */
  ow_delay( D100US );
    1398:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    139c:	8a 12       	call	r10		;

  /* Grab the status of the bus */  
  status =  !(P1IN & 0x02) ;
    139e:	5f 42 20 00 	mov.b	&0x0020,r15	;0x0020
    13a2:	4b 4f       	mov.b	r15,	r11	;
    13a4:	12 c3       	clrc			
    13a6:	0b 10       	rrc	r11		;
    13a8:	1b e3       	xor	#1,	r11	;r3 As==01
    13aa:	1b f3       	and	#1,	r11	;r3 As==01
  
  /* Finish out the presence pulse time */
  ow_delay( D150US );
    13ac:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    13b0:	8a 12       	call	r10		;
  
  _EINT();
    13b2:	32 d2       	eint			
  return status;
}
    13b4:	0f 4b       	mov	r11,	r15	;
    13b6:	3a 41       	pop	r10		;
    13b8:	3b 41       	pop	r11		;
    13ba:	30 41       	ret			

000013bc <ow_write>:



/* -----------------------------------------------------------------------
   Write a 1-wire byte
   ----------------------------------------------------------------------- */
void ow_write( unsigned char d )
{
    13bc:	0b 12       	push	r11		;
    13be:	0a 12       	push	r10		;
    13c0:	09 12       	push	r9		;
    13c2:	4b 4f       	mov.b	r15,	r11	;
  unsigned int i;
  
  /* Output a 1 */
  _DINT();
    13c4:	32 c2       	dint			
  P1OUT |= 0x02;
    13c6:	e2 d3 21 00 	bis.b	#2,	&0x0021	;r3 As==10
  P1DIR |= 0x02;
    13ca:	e2 d3 22 00 	bis.b	#2,	&0x0022	;r3 As==10
  
  for(i=0;i<8;i++)
    13ce:	0a 43       	clr	r10		;
    13d0:	39 40 6c 13 	mov	#4972,	r9	;#0x136c
  {
    if( d & 0x01 )
    13d4:	0f 4b       	mov	r11,	r15	;
    13d6:	1f f3       	and	#1,	r15	;r3 As==01
    13d8:	10 24       	jz	$+34     	;abs 0x13fa
    {
      /* Write a 1 -- pull low for ~8uS (must be 1-15uS) */
      P1OUT &= ~0x02;
    13da:	e2 c3 21 00 	bic.b	#2,	&0x0021	;r3 As==10
      asm("  nop");
    13de:	03 43       	nop			
      asm("  nop");
    13e0:	03 43       	nop			
      asm("  nop");			/* About 8uS       	*/
    13e2:	03 43       	nop			
      P1OUT |= 0x02;                    /* Keep it high		*/
    13e4:	e2 d3 21 00 	bis.b	#2,	&0x0021	;r3 As==10
      ow_delay( D100US );
    13e8:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    13ec:	89 12       	call	r9		;
    } else {
      /* Write a 0 */
      P1OUT &= ~0x02;
      ow_delay( D100US );
      P1OUT |= 0x02;      
      asm("  nop");
      asm("  nop");
    }
    d = d >> 1;
    13ee:	12 c3       	clrc			
    13f0:	4b 10       	rrc.b	r11		;
    13f2:	1a 53       	inc	r10		;
    13f4:	3a 92       	cmp	#8,	r10	;r2 As==11
    13f6:	ee 2b       	jnc	$-34     	;abs 0x13d4
    13f8:	0a 3c       	jmp	$+22     	;abs 0x140e
    13fa:	e2 c3 21 00 	bic.b	#2,	&0x0021	;r3 As==10
    13fe:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    1402:	89 12       	call	r9		;
    1404:	e2 d3 21 00 	bis.b	#2,	&0x0021	;r3 As==10
    1408:	03 43       	nop			
    140a:	03 43       	nop			
    140c:	f0 3f       	jmp	$-30     	;abs 0x13ee
  }
  
  /* Let pullup pull data line high */
  P1DIR &= ~0x02;
    140e:	e2 c3 22 00 	bic.b	#2,	&0x0022	;r3 As==10

  _EINT();
    1412:	32 d2       	eint			
}
    1414:	39 41       	pop	r9		;
    1416:	3a 41       	pop	r10		;
    1418:	3b 41       	pop	r11		;
    141a:	30 41       	ret			

0000141c <ow_read>:


/* -----------------------------------------------------------------------
   Read a 1-wire byte
   ----------------------------------------------------------------------- */
unsigned char ow_read()
{
    141c:	0b 12       	push	r11		;
    141e:	0a 12       	push	r10		;
    1420:	09 12       	push	r9		;
  unsigned char d;
  unsigned int i;
  
  _DINT();
    1422:	32 c2       	dint			
  P1OUT |= 0x02;
    1424:	e2 d3 21 00 	bis.b	#2,	&0x0021	;r3 As==10
  P1DIR |= 0x02;
    1428:	e2 d3 22 00 	bis.b	#2,	&0x0022	;r3 As==10
  
  d = 0;
    142c:	4b 43       	clr.b	r11		;
  for(i=0;i<8;i++)
    142e:	0a 43       	clr	r10		;
    1430:	39 40 6c 13 	mov	#4972,	r9	;#0x136c
  {
    P1OUT &= ~0x02;			/* Pull ow line low	*/
    1434:	e2 c3 21 00 	bic.b	#2,	&0x0021	;r3 As==10
    P1DIR |= 0x02;
    1438:	e2 d3 22 00 	bis.b	#2,	&0x0022	;r3 As==10
    asm("  nop");
    143c:	03 43       	nop			
    asm("  nop");
    143e:	03 43       	nop			
    asm("  nop");			/* About 8uS       	*/
    1440:	03 43       	nop			
    P1DIR &= ~0x02;			/* Let pullup pull	*/      
    1442:	e2 c3 22 00 	bic.b	#2,	&0x0022	;r3 As==10
  
    /* Delay for 20uS before sampling */
    ow_delay( 0 );
    1446:	0f 43       	clr	r15		;
    1448:	89 12       	call	r9		;
    
    d = d >> 1;
    144a:	12 c3       	clrc			
    144c:	4b 10       	rrc.b	r11		;
    if( P1IN & 0x02 )
    144e:	5f 42 20 00 	mov.b	&0x0020,r15	;0x0020
    1452:	2f f3       	and	#2,	r15	;r3 As==10
    1454:	09 24       	jz	$+20     	;abs 0x1468
    {
      d = d | 0x80;
    1456:	7b d0 80 ff 	bis.b	#-128,	r11	;#0xff80
    } else {
      d = d & 0x7F;
    }
    
    /* Delay to allow release */
    ow_delay( 5 );
    145a:	3f 40 05 00 	mov	#5,	r15	;#0x0005
    145e:	89 12       	call	r9		;
    1460:	1a 53       	inc	r10		;
    1462:	3a 92       	cmp	#8,	r10	;r2 As==11
    1464:	e7 2b       	jnc	$-48     	;abs 0x1434
    1466:	03 3c       	jmp	$+8      	;abs 0x146e
    1468:	7b f0 7f 00 	and.b	#127,	r11	;#0x007f
    146c:	f6 3f       	jmp	$-18     	;abs 0x145a
  }
    
  _EINT();
    146e:	32 d2       	eint			
  return d;
    1470:	4f 4b       	mov.b	r11,	r15	;
}
    1472:	39 41       	pop	r9		;
    1474:	3a 41       	pop	r10		;
    1476:	3b 41       	pop	r11		;
    1478:	30 41       	ret			

0000147a <ow_read_rom>:


/* -----------------------------------------------------------------------
   Read the serial number from a device
   ----------------------------------------------------------------------- */
void ow_read_rom( unsigned char *sn )
{
    147a:	0b 12       	push	r11		;
    147c:	0a 12       	push	r10		;
    147e:	09 12       	push	r9		;
    1480:	08 12       	push	r8		;
    1482:	0a 4f       	mov	r15,	r10	;
  unsigned int i;

  if( ow_reset() == 1 )
    1484:	38 40 7c 13 	mov	#4988,	r8	;#0x137c
    1488:	88 12       	call	r8		;
    148a:	1f 93       	cmp	#1,	r15	;r3 As==01
    148c:	11 20       	jnz	$+36     	;abs 0x14b0
  {
    /* Send the read ROM command */
    ow_write( 0x33 );
    148e:	7f 40 33 00 	mov.b	#51,	r15	;#0x0033
    1492:	b0 12 bc 13 	call	#5052		;#0x13bc
    
    for(i=0;i<8;i++)
    1496:	0b 43       	clr	r11		;
    1498:	39 40 1c 14 	mov	#5148,	r9	;#0x141c
    {
      /* Read the serial number */
      sn[i] = ow_read();
    149c:	89 12       	call	r9		;
    149e:	4e 4f       	mov.b	r15,	r14	;
    14a0:	0f 4a       	mov	r10,	r15	;
    14a2:	0f 5b       	add	r11,	r15	;
    14a4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;
    14a8:	1b 53       	inc	r11		;
    14aa:	3b 92       	cmp	#8,	r11	;r2 As==11
    14ac:	f7 2b       	jnc	$-16     	;abs 0x149c
    }
    
    ow_reset();
    14ae:	88 12       	call	r8		;
  }
}
    14b0:	38 41       	pop	r8		;
    14b2:	39 41       	pop	r9		;
    14b4:	3a 41       	pop	r10		;
    14b6:	3b 41       	pop	r11		;
    14b8:	30 41       	ret			

000014ba <__stop_progExec__>:
    14ba:	0f 12       	push	r15		;
    14bc:	3f 41       	pop	r15		;

000014be <__stop_progLoop>:
    14be:	02 df       	bis	r15,	r2	;
    14c0:	fe 3f       	jmp	$-2      	;abs 0x14be
Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	3a 11 a6 12 a8 12 aa 12 ac 12 ae 12 d0 12 d2 12     :...............
    fff0:	d4 12 d6 12 d8 12 da 12 dc 12 de 12 e0 12 00 11     ................
