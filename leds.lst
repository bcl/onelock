
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
00001100 l    d  .text	00000000 
00000200 l    d  .data	00000000 
00000c00 l    d  .bootloader	00000000 
00001000 l    d  .infomem	00000000 
00001000 l    d  .infomemnobits	00000000 
00000200 l    d  .bss	00000000 
00000208 l    d  .noinit	00000000 
0000ffe0 l    d  .vectors	00000000 
00000000 l    d  .stab	00000000 
00000000 l    d  .stabstr	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
0000012e l       *ABS*	00000000 TAIV
00000160 l       *ABS*	00000000 TACTL
00000162 l       *ABS*	00000000 TACCTL0
00000164 l       *ABS*	00000000 TACCTL1
00000166 l       *ABS*	00000000 TACCTL2
00000170 l       *ABS*	00000000 TAR
00000172 l       *ABS*	00000000 TACCR0
00000174 l       *ABS*	00000000 TACCR1
00000176 l       *ABS*	00000000 TACCR2
00000162 l       *ABS*	00000000 CCTL0
00000164 l       *ABS*	00000000 CCTL1
00000166 l       *ABS*	00000000 CCTL2
00000172 l       *ABS*	00000000 CCR0
00000174 l       *ABS*	00000000 CCR1
00000176 l       *ABS*	00000000 CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000190 l       *ABS*	00000000 TBR
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000004 l       *ABS*	00000000 ME1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 main.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
0000120c l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 interrupts.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
000012ae l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 dco.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001338 l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 onewire.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001384 l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00001388 l       .text	00000000 __stop_progLoop
00001120  w      .text	00000000 _clear_bss_init__
00000200 g     O .bss	00000002 VZC_2delta
00001348 g     F .text	0000003c ow_reset
000012ac g     F .text	00000002 INT_nmi
0000138c g       .text	00000000 _etext
00001276 g     F .text	00000002 INT_uart1rx
00001384 g       .text	00000000 __stop_progExec__
0000113a g       .text	00000000 _unexpected_1_
0000113a  w      .text	00000000 vector_ffe0
0000117c g     F .text	00000026 InitDCO
00000206 g     O .bss	00000002 VZC_LastCap
0000129c g     F .text	00000002 INT_timera0
00000202 g     O .bss	00000001 Status
000012aa g     F .text	00000002 INT_timerb0
0000129c g       .text	00000000 vector_ffec
000012a0 g       .text	00000000 vector_fff0
00001272 g     F .text	00000002 INT_port2
0000113a g       .text	00000000 __dtors_end
00000208 g       .bss	00000000 __bss_end
000012ac g       .text	00000000 vector_fffc
0000129e g     F .text	00000002 INT_adc
00001274 g       .text	00000000 vector_ffe4
00001274 g     F .text	00000002 INT_uart1tx
000012a6 g     F .text	00000002 INT_compa
0000ffe0 g     O .vectors	00000020 InterruptVectors
00001278 g     F .text	00000002 INT_port1
00000204 g     O .bss	00000002 Rsel
00001136  w      .text	00000000 _end_of_init__
000012a8 g     F .text	00000002 INT_timerb1
000012a2 g     F .text	00000002 INT_uart0rx
00001272 g       .text	00000000 vector_ffe2
00001278 g       .text	00000000 vector_ffe8
0000113e  w      .text	00000000 _unexpected_
000012aa g       .text	00000000 vector_fffa
00001100 g       .text	00000000 _reset_vector__
0000113a g       .text	00000000 __ctors_start
0000116e g     F .text	0000000e InitOSC
00000200 g       .bss	00000000 __bss_start
0000129e g       .text	00000000 vector_ffee
000012a4 g       .text	00000000 vector_fff4
000011a2 g     F .text	0000006a main
0000120c g     F .text	00000066 InitIRQ
000012a8 g       .text	00000000 vector_fff8
000012a2 g       .text	00000000 vector_fff2
00010000 g       .vectors	00000000 _vectors_end
00001276 g       .text	00000000 vector_ffe6
00001140 g     F .text	00000012 delay
0000127a g     F .text	00000022 INT_timera1
00001152 g     F .text	0000001c InitPorts
000012ae g     F .text	00000032 Rsel_set
0000113a g       .text	00000000 __dtors_start
0000113a g       .text	00000000 __ctors_end
00000a00 g       *ABS*	00000000 __stack
000012a4 g     F .text	00000002 INT_wdt
00000200 g       .data	00000000 _edata
00000208 g       .noinit	00000000 _end
000012e0 g     F .text	00000058 dco_step
000012a6 g       .text	00000000 vector_fff6
00001338 g     F .text	00000010 ow_delay
00001106  w      .text	00000000 _copy_data_init__
000012a0 g     F .text	00000002 INT_uart0tx
00000200 g       .data	00000000 __data_start
0000127a g       .text	00000000 vector_ffea


Disassembly of section .text:

00001100 <_reset_vector__>:
    1100:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    1104:	20 01 

00001106 <_copy_data_init__>:
    1106:	3f 40 8c 13 	mov	#5004,	r15	;#0x138c
    110a:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    110e:	3d 40 00 02 	mov	#512,	r13	;#0x0200
    1112:	0d 9e       	cmp	r14,	r13	;
    1114:	05 24       	jz	$+12     	;abs 0x1120
    1116:	fe 4f 00 00 	mov.b	@r15+,	0(r14)	;
    111a:	1e 53       	inc	r14		;
    111c:	0e 9d       	cmp	r13,	r14	;
    111e:	fb 2b       	jnc	$-8      	;abs 0x1116

00001120 <_clear_bss_init__>:
    1120:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    1124:	3d 40 08 02 	mov	#520,	r13	;#0x0208
    1128:	0d 9f       	cmp	r15,	r13	;
    112a:	05 24       	jz	$+12     	;abs 0x1136
    112c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00
    1130:	1f 53       	inc	r15		;
    1132:	0f 9d       	cmp	r13,	r15	;
    1134:	fb 2b       	jnc	$-8      	;abs 0x112c

00001136 <_end_of_init__>:
    1136:	30 40 a2 11 	br	#0x11a2		;

0000113a <__ctors_end>:
    113a:	30 40 3e 11 	br	#0x113e		;

0000113e <_unexpected_>:
    113e:	00 13       	reti			

00001140 <delay>:
Delay function.
   ----------------------------------------------------------------------- */
void delay(unsigned int d) {
   int i;
   for (i = 0; i<d; i++) {
    1140:	0e 43       	clr	r14		;
    1142:	0e 9f       	cmp	r15,	r14	;
    1144:	05 2c       	jc	$+12     	;abs 0x1150
      nop();
    1146:	03 43       	nop			
      nop();
    1148:	03 43       	nop			
    114a:	1e 53       	inc	r14		;
    114c:	0e 9f       	cmp	r15,	r14	;
    114e:	fb 2b       	jnc	$-8      	;abs 0x1146
   }
}
    1150:	30 41       	ret			

00001152 <InitPorts>:


void InitPorts( void )
{
  /* Initialize the ports */
  P1OUT  = P1OUT_INIT;                //Init output data of port1
    1152:	c2 43 21 00 	mov.b	#0,	&0x0021	;r3 As==00
  P2OUT  = P2OUT_INIT;                //Init output data of port2
    1156:	c2 43 29 00 	mov.b	#0,	&0x0029	;r3 As==00

  P1SEL  = P1SEL_INIT;                //Select port or module -function on port1
    115a:	c2 43 26 00 	mov.b	#0,	&0x0026	;r3 As==00
  P2SEL  = P2SEL_INIT;                //Select port or module -function on port2
    115e:	c2 43 2e 00 	mov.b	#0,	&0x002e	;r3 As==00

  P1DIR  = P1DIR_INIT;                //Init port direction register of port1
    1162:	f2 40 fd ff 	mov.b	#-3,	&0x0022	;#0xfffd
    1166:	22 00 
  P2DIR  = P2DIR_INIT;                //Init port direction register of port2
    1168:	f2 43 2a 00 	mov.b	#-1,	&0x002a	;r3 As==11
}
    116c:	30 41       	ret			

0000116e <InitOSC>:

void InitOSC( void )
{
    /* Clear OSC Fault */
    IE1 = 0x00;
    116e:	c2 43 00 00 	mov.b	#0,	&0x0000	;r3 As==00
    IFG1 = 0x00;
    1172:	c2 43 02 00 	mov.b	#0,	&0x0002	;r3 As==00
    
    /* Select DCO/1 as MCLK */
    BCSCTL2 = 0x00;
    1176:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
}
    117a:	30 41       	ret			

0000117c <InitDCO>:

void InitDCO( void )
{
    /* Setup the DCO frequency */
    Rsel = RSEL_NOM;
    117c:	a2 42 04 02 	mov	#4,	&0x0204	;r2 As==10
    Rsel_set( Rsel );
    1180:	2f 42       	mov	#4,	r15	;r2 As==10
    1182:	b0 12 ae 12 	call	#4782		;#0x12ae
    
    /* Setup for ACLK/8 */
    BCSCTL1 |= DIVA_DIV8;
    1186:	f2 d0 30 00 	bis.b	#48,	&0x0057	;#0x0030
    118a:	57 00 

    /* Diagnostic */
    /* Output SMCLK on P1.4 pin 16 f149 */
    P1SEL |= 0x10;
    118c:	f2 d0 10 00 	bis.b	#16,	&0x0026	;#0x0010
    1190:	26 00 
    P1DIR |= 0x10;
    1192:	f2 d0 10 00 	bis.b	#16,	&0x0022	;#0x0010
    1196:	22 00 
    
    /* Output ACLK on P2.0 pin 20 f149 */
    P2SEL |= 0x01;
    1198:	d2 d3 2e 00 	bis.b	#1,	&0x002e	;r3 As==01
    P2DIR |= 0x01;
    119c:	d2 d3 2a 00 	bis.b	#1,	&0x002a	;r3 As==01
}
    11a0:	30 41       	ret			

000011a2 <main>:



/* -----------------------------------------------------------------------
   Main function with a blinking LED
   ----------------------------------------------------------------------- */
int main(void)
{
    11a2:	31 40 f8 09 	mov	#2552,	r1	;#0x09f8
    short i;
    short adj_timer;
    unsigned char sn[8];		/* 1-wire serial number 	*/
    
    /* Watchdog disabled */
    WDTCTL = WDTPW|WDTHOLD;
    11a6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    11aa:	20 01 

    Status = 0;
    11ac:	c2 43 02 02 	mov.b	#0,	&0x0202	;r3 As==00

    InitPorts();
    11b0:	b0 12 52 11 	call	#4434		;#0x1152
    InitOSC();
    11b4:	b0 12 6e 11 	call	#4462		;#0x116e
    InitDCO();
    11b8:	b0 12 7c 11 	call	#4476		;#0x117c
    InitIRQ();
    11bc:	b0 12 0c 12 	call	#4620		;#0x120c

    P1OUT &= ~0x01;
    11c0:	d2 c3 21 00 	bic.b	#1,	&0x0021	;r3 As==01
    adj_timer = DCO_ADJ_TIME;
    11c4:	2a 43       	mov	#2,	r10	;r3 As==10
    11c6:	38 40 e0 12 	mov	#4832,	r8	;#0x12e0
    11ca:	39 40 48 13 	mov	#4936,	r9	;#0x1348
    while (1) {                         //main loop, never ends...
      if( Status & TASK_OVR )
    11ce:	5f 42 02 02 	mov.b	&0x0202,r15	;0x0202
    11d2:	1f f3       	and	#1,	r15	;r3 As==01
    11d4:	04 24       	jz	$+10     	;abs 0x11de
      {
        if( --adj_timer == 0 )
    11d6:	3a 53       	add	#-1,	r10	;r3 As==11
    11d8:	11 24       	jz	$+36     	;abs 0x11fc
        {
          dco_step();
          adj_timer = DCO_ADJ_TIME;
          P1OUT &= ~0x01;
        }
        Status &= ~TASK_OVR; 
    11da:	d2 c3 02 02 	bic.b	#1,	&0x0202	;r3 As==01
      }

      if( !(P1IN & 0x02) )
    11de:	5f 42 20 00 	mov.b	&0x0020,r15	;0x0020
    11e2:	2f f3       	and	#2,	r15	;r3 As==10
    11e4:	f4 23       	jnz	$-22     	;abs 0x11ce
      {
        /* See if a device is connected */
        for(i=0; i<5; i++)
    11e6:	2b 42       	mov	#4,	r11	;r2 As==10
        {
          if( ow_reset() )
    11e8:	89 12       	call	r9		;
    11ea:	0f 93       	cmp	#0,	r15	;r3 As==00
    11ec:	02 24       	jz	$+6      	;abs 0x11f2
          {
            P1OUT |= 0x01;
    11ee:	d2 d3 21 00 	bis.b	#1,	&0x0021	;r3 As==01
    11f2:	3b 53       	add	#-1,	r11	;r3 As==11
    11f4:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    11f8:	f7 37       	jge	$-16     	;abs 0x11e8
    11fa:	e9 3f       	jmp	$-44     	;abs 0x11ce
    11fc:	88 12       	call	r8		;
    11fe:	2a 43       	mov	#2,	r10	;r3 As==10
    1200:	d2 c3 21 00 	bic.b	#1,	&0x0021	;r3 As==01
    1204:	ea 3f       	jmp	$-42     	;abs 0x11da
              
            /* Go Read the 1-wire serial number */
//            ow_read_rom( sn );
 
            /* Check against the access list */
              
              
            /* Unlock the lock */
              
          } /* presence */
        } /* loop */
      }
    }
}
    1206:	31 52       	add	#8,	r1	;r2 As==11
    1208:	30 40 84 13 	br	#0x1384		;

0000120c <InitIRQ>:
{
  short i;
  
  /* Setup Timer A0 run off MCLK /1, continuous up count, start */
  TACTL = TASSEL_SMCLK | TACLR;
    120c:	b2 40 04 02 	mov	#516,	&0x0160	;#0x0204
    1210:	60 01 
  TACTL |= MC_CONT;
    1212:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    1216:	60 01 
  
  /* Setup CCR2 */
  CCTL2 = CM_POS|CCIS_1|SCS|CAP|OUTMOD_SET;
    1218:	b2 40 20 59 	mov	#22816,	&0x0166	;#0x5920
    121c:	66 01 

  /* Delay a bit for ACLK to settle */
  for (i = 0; i<0x1000; i++)
    121e:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
  {
    nop();
    1222:	03 43       	nop			
    1224:	03 43       	nop			
    1226:	03 43       	nop			
    1228:	03 43       	nop			
    122a:	03 43       	nop			
    122c:	03 43       	nop			
    122e:	03 43       	nop			
    1230:	03 43       	nop			
    1232:	03 43       	nop			
    1234:	03 43       	nop			
    1236:	03 43       	nop			
    1238:	03 43       	nop			
    123a:	03 43       	nop			
    123c:	03 43       	nop			
    123e:	03 43       	nop			
    1240:	03 43       	nop			
    1242:	03 43       	nop			
    1244:	03 43       	nop			
    1246:	03 43       	nop			
    1248:	03 43       	nop			
    124a:	03 43       	nop			
    124c:	03 43       	nop			
    124e:	03 43       	nop			
    1250:	03 43       	nop			
    1252:	03 43       	nop			
    1254:	03 43       	nop			
    1256:	03 43       	nop			
    1258:	03 43       	nop			
    125a:	03 43       	nop			
    125c:	03 43       	nop			
    125e:	03 43       	nop			
    1260:	03 43       	nop			
    1262:	3f 50 e0 ff 	add	#-32,	r15	;#0xffe0
    1266:	dd 23       	jnz	$-68     	;abs 0x1222
  }
  /* Enable CCTL2 interrupt */
  CCTL2 |= CCIE;
    1268:	b2 d0 10 00 	bis	#16,	&0x0166	;#0x0010
    126c:	66 01 

  _EINT();
    126e:	32 d2       	eint			
}
    1270:	30 41       	ret			

00001272 <INT_port2>:




interrupt (PORT2_VECTOR) INT_port2( void )
{
    1272:	00 13       	reti			

00001274 <INT_uart1tx>:
}

interrupt (UART1TX_VECTOR) INT_uart1tx( void )
{
    1274:	00 13       	reti			

00001276 <INT_uart1rx>:
}

interrupt (UART1RX_VECTOR) INT_uart1rx( void )
{
    1276:	00 13       	reti			

00001278 <INT_port1>:
}

interrupt (PORT1_VECTOR) INT_port1( void )
{
    1278:	00 13       	reti			

0000127a <INT_timera1>:
} 

/* -----------------------------------------------------------------------
   Measure the 1/2 period of the 32.768KHz xtal
   ----------------------------------------------------------------------- */
interrupt (TIMERA1_VECTOR) INT_timera1( void )
{
    127a:	0f 12       	push	r15		;
  if( TAIV == 0x04 )
    127c:	a2 92 2e 01 	cmp	#4,	&0x012e	;r2 As==10
    1280:	0b 20       	jnz	$+24     	;abs 0x1298
  {
    /* CCR2 Interrupt */
    
    /* Measure the 32.768KHz period */
    VZC_2delta = CCR2 - VZC_LastCap;
    1282:	1f 42 76 01 	mov	&0x0176,r15	;0x0176
    1286:	1f 82 06 02 	sub	&0x0206,r15	;0x0206
    128a:	82 4f 00 02 	mov	r15,	&0x0200	;
    VZC_LastCap = CCR2;
    128e:	92 42 76 01 	mov	&0x0176,&0x0206	;0x0176
    1292:	06 02 
    Status |= TASK_OVR;
    1294:	92 d3 02 02 	bis	#1,	&0x0202	;r3 As==01
  }
}
    1298:	3f 41       	pop	r15		;
    129a:	00 13       	reti			

0000129c <INT_timera0>:

interrupt (TIMERA0_VECTOR) INT_timera0( void )
{
    129c:	00 13       	reti			

0000129e <INT_adc>:
}

interrupt (ADC_VECTOR) INT_adc( void )
{
    129e:	00 13       	reti			

000012a0 <INT_uart0tx>:
}

interrupt (UART0TX_VECTOR) INT_uart0tx( void )
{
    12a0:	00 13       	reti			

000012a2 <INT_uart0rx>:
}

interrupt (UART0RX_VECTOR) INT_uart0rx( void )
{
    12a2:	00 13       	reti			

000012a4 <INT_wdt>:
}

interrupt (WDT_VECTOR) INT_wdt( void )
{
    12a4:	00 13       	reti			

000012a6 <INT_compa>:
}

interrupt (COMPARATORA_VECTOR) INT_compa( void )
{
    12a6:	00 13       	reti			

000012a8 <INT_timerb1>:
}

interrupt (TIMERB1_VECTOR) INT_timerb1( void )
{
    12a8:	00 13       	reti			

000012aa <INT_timerb0>:
}

interrupt (TIMERB0_VECTOR) INT_timerb0( void )
{
    12aa:	00 13       	reti			

000012ac <INT_nmi>:
}

interrupt (NMI_VECTOR) INT_nmi( void )
{
    12ac:	00 13       	reti			

000012ae <Rsel_set>:
/* -----------------------------------------------------------------------
   Adjust the DCO resistor selection in streps until it is at rsel
   ----------------------------------------------------------------------- */
void Rsel_set( short rsel )
{
    12ae:	0e 4f       	mov	r15,	r14	;
  while( (BCSCTL1 & 0x07) != rsel )
    12b0:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    12b4:	3f f0 07 00 	and	#7,	r15	;#0x0007
    12b8:	0f 9e       	cmp	r14,	r15	;
    12ba:	0e 24       	jz	$+30     	;abs 0x12d8
  {
    if( (BCSCTL1 & 0x07 ) > rsel )
    12bc:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    12c0:	3f f0 07 00 	and	#7,	r15	;#0x0007
    12c4:	0e 9f       	cmp	r15,	r14	;
    12c6:	09 34       	jge	$+20     	;abs 0x12da
    {
      BCSCTL1 -= 1;
    12c8:	f2 53 57 00 	add.b	#-1,	&0x0057	;r3 As==11
    12cc:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    12d0:	3f f0 07 00 	and	#7,	r15	;#0x0007
    12d4:	0f 9e       	cmp	r14,	r15	;
    12d6:	f2 23       	jnz	$-26     	;abs 0x12bc
    } else {
      BCSCTL1 += 1;
    }
  }
}
    12d8:	30 41       	ret			
    12da:	d2 53 57 00 	inc.b	&0x0057		;
    12de:	f6 3f       	jmp	$-18     	;abs 0x12cc

000012e0 <dco_step>:


/* -----------------------------------------------------------------------
   Adjust the DCO using step method
   ----------------------------------------------------------------------- */
void dco_step( void )
{
    if( DCOCTL == DCO_MAX )
    12e0:	f2 90 e2 ff 	cmp.b	#-30,	&0x0056	;#0xffe2
    12e4:	56 00 
    12e6:	1e 24       	jz	$+62     	;abs 0x1324
    {
      /* Increment Rsel */
      if( (BCSCTL1 & 0x07)  < 0x07 )
      {
        BCSCTL1 += 1;
        DCOCTL = 0x60;
      } 
    } else if( DCOCTL == DCO_MIN ) {
    12e8:	f2 90 05 00 	cmp.b	#5,	&0x0056	;#0x0005
    12ec:	56 00 
    12ee:	0e 24       	jz	$+30     	;abs 0x130c
      /* Decrement Rsel */
      if( (BCSCTL1 & 0x07) > 0x00 )
      {
        BCSCTL1 -= 1;
        DCOCTL = 0x60;
      } 
    } else {
      if( VZC_2delta < FSET )
    12f0:	b2 90 f4 00 	cmp	#244,	&0x0200	;#0x00f4
    12f4:	00 02 
    12f6:	03 2c       	jc	$+8      	;abs 0x12fe
      {
        DCOCTL += 1;
    12f8:	d2 53 56 00 	inc.b	&0x0056		;
      } else if( VZC_2delta > FSET ) {
        DCOCTL -= 1;
      }    
    }
}
    12fc:	30 41       	ret			
    12fe:	b2 90 f5 00 	cmp	#245,	&0x0200	;#0x00f5
    1302:	00 02 
    1304:	02 28       	jnc	$+6      	;abs 0x130a
    1306:	f2 53 56 00 	add.b	#-1,	&0x0056	;r3 As==11
    130a:	30 41       	ret			
    130c:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    1310:	3f f0 07 00 	and	#7,	r15	;#0x0007
    1314:	1f 93       	cmp	#1,	r15	;r3 As==01
    1316:	f9 3b       	jl	$-12     	;abs 0x130a
    1318:	f2 53 57 00 	add.b	#-1,	&0x0057	;r3 As==11
    131c:	f2 40 60 00 	mov.b	#96,	&0x0056	;#0x0060
    1320:	56 00 
    1322:	30 41       	ret			
    1324:	5f 42 57 00 	mov.b	&0x0057,r15	;0x0057
    1328:	3f f0 07 00 	and	#7,	r15	;#0x0007
    132c:	3f 90 07 00 	cmp	#7,	r15	;#0x0007
    1330:	ec 37       	jge	$-38     	;abs 0x130a
    1332:	d2 53 57 00 	inc.b	&0x0057		;
    1336:	f2 3f       	jmp	$-26     	;abs 0x131c

00001338 <ow_delay>:
void ow_delay( unsigned int d )
{
  unsigned int i;

  for( i=0; i<d; i++ )
    1338:	0e 43       	clr	r14		;
    133a:	0e 9f       	cmp	r15,	r14	;
    133c:	04 2c       	jc	$+10     	;abs 0x1346
  {
    asm("  nop");
    133e:	03 43       	nop			
    1340:	1e 53       	inc	r14		;
    1342:	0e 9f       	cmp	r15,	r14	;
    1344:	fc 2b       	jnc	$-6      	;abs 0x133e
  }
}
    1346:	30 41       	ret			

00001348 <ow_reset>:


/* -----------------------------------------------------------------------
   1-wire reset and presence detection

   return 0 no presence detected
   return 1 presence detected
   ----------------------------------------------------------------------- */
int ow_reset( void )
{
    1348:	0b 12       	push	r11		;
    134a:	0a 12       	push	r10		;
  int status;
  
  /* Pull the 1-wire bus low for 500uS */
  P1OUT &= ~0x02;
    134c:	e2 c3 21 00 	bic.b	#2,	&0x0021	;r3 As==10
  P1DIR |= 0x02;
    1350:	e2 d3 22 00 	bis.b	#2,	&0x0022	;r3 As==10
  
  ow_delay( D500US );
    1354:	3a 40 38 13 	mov	#4920,	r10	;#0x1338
    1358:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    135c:	8a 12       	call	r10		;
  
  /* Allow resistor to pull it high */
  P1DIR &= ~0x02;
    135e:	e2 c3 22 00 	bic.b	#2,	&0x0022	;r3 As==10
  
  /* Delay 100uS before testing for presence */
  ow_delay( D100US );
    1362:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    1366:	8a 12       	call	r10		;

  /* Grab the status of the bus */  
  status =  !(P1IN & 0x02) ;
    1368:	5f 42 20 00 	mov.b	&0x0020,r15	;0x0020
    136c:	4b 4f       	mov.b	r15,	r11	;
    136e:	12 c3       	clrc			
    1370:	0b 10       	rrc	r11		;
    1372:	1b e3       	xor	#1,	r11	;r3 As==01
    1374:	1b f3       	and	#1,	r11	;r3 As==01
  
  /* Finish out the presence pulse time */
  ow_delay( D150US );
    1376:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    137a:	8a 12       	call	r10		;
  
  return status;
}
    137c:	0f 4b       	mov	r11,	r15	;
    137e:	3a 41       	pop	r10		;
    1380:	3b 41       	pop	r11		;
    1382:	30 41       	ret			

00001384 <__stop_progExec__>:
    1384:	0f 12       	push	r15		;
    1386:	3f 41       	pop	r15		;

00001388 <__stop_progLoop>:
    1388:	02 df       	bis	r15,	r2	;
    138a:	fe 3f       	jmp	$-2      	;abs 0x1388
Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	3a 11 72 12 74 12 76 12 78 12 7a 12 9c 12 9e 12     :.r.t.v.x.z.....
    fff0:	a0 12 a2 12 a4 12 a6 12 a8 12 aa 12 ac 12 00 11     ................
