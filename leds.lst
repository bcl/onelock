
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
00001100 l    d  .text	00000000 
00000200 l    d  .data	00000000 
00000c00 l    d  .bootloader	00000000 
00001000 l    d  .infomem	00000000 
00001000 l    d  .infomemnobits	00000000 
00000200 l    d  .bss	00000000 
00000202 l    d  .noinit	00000000 
0000ffe0 l    d  .vectors	00000000 
00000000 l    d  .stab	00000000 
00000000 l    d  .stabstr	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 gcrt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 gcrt0.S
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
0000012e l       *ABS*	00000000 TAIV
00000160 l       *ABS*	00000000 TACTL
00000162 l       *ABS*	00000000 TACCTL0
00000164 l       *ABS*	00000000 TACCTL1
00000166 l       *ABS*	00000000 TACCTL2
00000170 l       *ABS*	00000000 TAR
00000172 l       *ABS*	00000000 TACCR0
00000174 l       *ABS*	00000000 TACCR1
00000176 l       *ABS*	00000000 TACCR2
00000162 l       *ABS*	00000000 CCTL0
00000164 l       *ABS*	00000000 CCTL1
00000166 l       *ABS*	00000000 CCTL2
00000172 l       *ABS*	00000000 CCR0
00000174 l       *ABS*	00000000 CCR1
00000176 l       *ABS*	00000000 CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000190 l       *ABS*	00000000 TBR
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000004 l       *ABS*	00000000 ME1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 main.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
000011ae l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 interrupts.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001242 l       .text	00000000 Letext
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00001246 l       .text	00000000 __stop_progLoop
00001120  w      .text	00000000 _clear_bss_init__
00000200 g     O .bss	00000002 last_tbr
00001240 g     F .text	00000002 INT_nmi
0000124a g       .text	00000000 _etext
000011e6 g     F .text	00000002 INT_uart1rx
00001242 g       .text	00000000 __stop_progExec__
0000113a g       .text	00000000 _unexpected_1_
0000113a  w      .text	00000000 vector_ffe0
000011ec g     F .text	00000046 INT_timera0
0000123e g     F .text	00000002 INT_timerb0
000011ec g       .text	00000000 vector_ffec
00001234 g       .text	00000000 vector_fff0
000011e2 g     F .text	00000002 INT_port2
0000113a g       .text	00000000 __dtors_end
00000202 g       .bss	00000000 __bss_end
00001240 g       .text	00000000 vector_fffc
00001232 g     F .text	00000002 INT_adc
000011e4 g       .text	00000000 vector_ffe4
000011e4 g     F .text	00000002 INT_uart1tx
0000123a g     F .text	00000002 INT_compa
0000ffe0 g     O .vectors	00000020 InterruptVectors
000011e8 g     F .text	00000002 INT_port1
00001136  w      .text	00000000 _end_of_init__
0000123c g     F .text	00000002 INT_timerb1
00001236 g     F .text	00000002 INT_uart0rx
000011e2 g       .text	00000000 vector_ffe2
000011e8 g       .text	00000000 vector_ffe8
0000113e  w      .text	00000000 _unexpected_
0000123e g       .text	00000000 vector_fffa
00001100 g       .text	00000000 _reset_vector__
0000113a g       .text	00000000 __ctors_start
0000116c g     F .text	00000008 InitOSC
00000200 g       .bss	00000000 __bss_start
00001232 g       .text	00000000 vector_ffee
00001238 g       .text	00000000 vector_fff4
00001174 g     F .text	0000003a main
000011ae g     F .text	00000034 InitIRQ
0000123c g       .text	00000000 vector_fff8
00001236 g       .text	00000000 vector_fff2
00010000 g       .vectors	00000000 _vectors_end
000011e6 g       .text	00000000 vector_ffe6
00001140 g     F .text	00000012 delay
000011ea g     F .text	00000002 INT_timera1
00001152 g     F .text	0000001a InitPorts
0000113a g       .text	00000000 __dtors_start
0000113a g       .text	00000000 __ctors_end
00000a00 g       *ABS*	00000000 __stack
00001238 g     F .text	00000002 INT_wdt
00000200 g       .data	00000000 _edata
00000202 g       .noinit	00000000 _end
0000123a g       .text	00000000 vector_fff6
00001106  w      .text	00000000 _copy_data_init__
00001234 g     F .text	00000002 INT_uart0tx
00000200 g       .data	00000000 __data_start
000011ea g       .text	00000000 vector_ffea


Disassembly of section .text:

00001100 <_reset_vector__>:
    1100:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    1104:	20 01 

00001106 <_copy_data_init__>:
    1106:	3f 40 4a 12 	mov	#4682,	r15	;#0x124a
    110a:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    110e:	3d 40 00 02 	mov	#512,	r13	;#0x0200
    1112:	0d 9e       	cmp	r14,	r13	;
    1114:	05 24       	jz	$+12     	;abs 0x1120
    1116:	fe 4f 00 00 	mov.b	@r15+,	0(r14)	;
    111a:	1e 53       	inc	r14		;
    111c:	0e 9d       	cmp	r13,	r14	;
    111e:	fb 2b       	jnc	$-8      	;abs 0x1116

00001120 <_clear_bss_init__>:
    1120:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    1124:	3d 40 02 02 	mov	#514,	r13	;#0x0202
    1128:	0d 9f       	cmp	r15,	r13	;
    112a:	05 24       	jz	$+12     	;abs 0x1136
    112c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00
    1130:	1f 53       	inc	r15		;
    1132:	0f 9d       	cmp	r13,	r15	;
    1134:	fb 2b       	jnc	$-8      	;abs 0x112c

00001136 <_end_of_init__>:
    1136:	30 40 74 11 	br	#0x1174		;

0000113a <__ctors_end>:
    113a:	30 40 3e 11 	br	#0x113e		;

0000113e <_unexpected_>:
    113e:	00 13       	reti			

00001140 <delay>:
Delay function.
   ----------------------------------------------------------------------- */
void delay(unsigned int d) {
   int i;
   for (i = 0; i<d; i++) {
    1140:	0e 43       	clr	r14		;
    1142:	0e 9f       	cmp	r15,	r14	;
    1144:	05 2c       	jc	$+12     	;abs 0x1150
      nop();
    1146:	03 43       	nop			
      nop();
    1148:	03 43       	nop			
    114a:	1e 53       	inc	r14		;
    114c:	0e 9f       	cmp	r15,	r14	;
    114e:	fb 2b       	jnc	$-8      	;abs 0x1146
   }
}
    1150:	30 41       	ret			

00001152 <InitPorts>:


void InitPorts( void )
{
  /* Initialize the ports */
  P1OUT  = P1OUT_INIT;                //Init output data of port1
    1152:	c2 43 21 00 	mov.b	#0,	&0x0021	;r3 As==00
  P2OUT  = P2OUT_INIT;                //Init output data of port2
    1156:	c2 43 29 00 	mov.b	#0,	&0x0029	;r3 As==00

  P1SEL  = P1SEL_INIT;                //Select port or module -function on port1
    115a:	c2 43 26 00 	mov.b	#0,	&0x0026	;r3 As==00
  P2SEL  = P2SEL_INIT;                //Select port or module -function on port2
    115e:	c2 43 2e 00 	mov.b	#0,	&0x002e	;r3 As==00

  P1DIR  = P1DIR_INIT;                //Init port direction register of port1
    1162:	f2 43 22 00 	mov.b	#-1,	&0x0022	;r3 As==11
  P2DIR  = P2DIR_INIT;                //Init port direction register of port2
    1166:	f2 43 2a 00 	mov.b	#-1,	&0x002a	;r3 As==11
}
    116a:	30 41       	ret			

0000116c <InitOSC>:

void InitOSC( void )
{
    /* Setup DCO for about 1MHz*/
    /* ~1MHz Rsel=5 DCO=3 MOD=0 DCOR=0 */    
    BCSCTL1 = 0x03;
    116c:	f2 40 03 00 	mov.b	#3,	&0x0057	;#0x0003
    1170:	57 00 
    
}
    1172:	30 41       	ret			

00001174 <main>:


/* -----------------------------------------------------------------------
   Main function with a blinking LED
   ----------------------------------------------------------------------- */
int main(void) {
    1174:	31 40 00 0a 	mov	#2560,	r1	;#0x0a00

    /* Watchdog disabled */
    WDTCTL = WDTPW|WDTHOLD;
    1178:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    117c:	20 01 

  InitPorts();
    117e:	b0 12 52 11 	call	#4434		;#0x1152
  InitOSC();
    1182:	b0 12 6c 11 	call	#4460		;#0x116c
  InitIRQ();
    1186:	b0 12 ae 11 	call	#4526		;#0x11ae
    
    
    /* Initialize the interrupts */
    P1IES  = P1IES_INIT;                //init port interrupts
    118a:	c2 43 24 00 	mov.b	#0,	&0x0024	;r3 As==00
    P2IES  = P2IES_INIT;
    118e:	c2 43 2c 00 	mov.b	#0,	&0x002c	;r3 As==00
    P1IE   = P1IE_INIT;
    1192:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
    P2IE   = P2IE_INIT;
    1196:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00
    119a:	3b 40 40 11 	mov	#4416,	r11	;#0x1140

    while (1) {                         //main loop, never ends...
       P1OUT ^= 1;
    119e:	d2 e3 21 00 	xor.b	#1,	&0x0021	;r3 As==01
       delay(0x4fff);
    11a2:	3f 40 ff 4f 	mov	#20479,	r15	;#0x4fff
    11a6:	8b 12       	call	r11		;
    11a8:	fa 3f       	jmp	$-10     	;abs 0x119e
    }
}
    11aa:	30 40 42 12 	br	#0x1242		;

000011ae <InitIRQ>:

void InitIRQ( void )
{
  /* Setup Timer A0 run off ACLK /1, continuous up count, start */
  TACTL = TASSEL_ACLK | TACLR;  
    11ae:	b2 40 04 01 	mov	#260,	&0x0160	;#0x0104
    11b2:	60 01 
  TACTL |= MC_CONT;
    11b4:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    11b8:	60 01 
  
  /* Setup Timer B0 to run off MCLK (DCO) /4 */
  TBCTL = TBSSEL_SMCLK | TBCLR | ID_DIV4;
    11ba:	b2 40 84 02 	mov	#644,	&0x0180	;#0x0284
    11be:	80 01 
  TBCTL |= MC_CONT;
    11c0:	b2 d0 20 00 	bis	#32,	&0x0180	;#0x0020
    11c4:	80 01 
    
  /* Setup an interrupt on TA0 for 125mS (4096 count) */
  last_tbr = TBR;
    11c6:	92 42 90 01 	mov	&0x0190,&0x0200	;0x0190
    11ca:	00 02 
  CCR0 = TAR + T125_MS;
    11cc:	1f 42 70 01 	mov	&0x0170,r15	;0x0170
    11d0:	3f 50 00 10 	add	#4096,	r15	;#0x1000
    11d4:	82 4f 72 01 	mov	r15,	&0x0172	;
  CCTL0 = CCIE;  
    11d8:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    11dc:	62 01 

  /* Enable Interrupts */
  _EINT();
    11de:	32 d2       	eint			
}
    11e0:	30 41       	ret			

000011e2 <INT_port2>:




interrupt (PORT2_VECTOR) INT_port2( void )
{
    11e2:	00 13       	reti			

000011e4 <INT_uart1tx>:
}

interrupt (UART1TX_VECTOR) INT_uart1tx( void )
{
    11e4:	00 13       	reti			

000011e6 <INT_uart1rx>:
}

interrupt (UART1RX_VECTOR) INT_uart1rx( void )
{
    11e6:	00 13       	reti			

000011e8 <INT_port1>:
}

interrupt (PORT1_VECTOR) INT_port1( void )
{
    11e8:	00 13       	reti			

000011ea <INT_timera1>:
} 

interrupt (TIMERA1_VECTOR) INT_timera1( void )
{
    11ea:	00 13       	reti			

000011ec <INT_timera0>:
}

interrupt (TIMERA0_VECTOR) INT_timera0( void )
{
    11ec:	0f 12       	push	r15		;
  unsigned short t;
  
  /* Stop Timer B */
  TBCTL = TBSSEL_SMCLK | ID_DIV4;
    11ee:	b2 40 80 02 	mov	#640,	&0x0180	;#0x0280
    11f2:	80 01 
  
  t = TBR;
    11f4:	1f 42 90 01 	mov	&0x0190,r15	;0x0190
  CCR0 += T125_MS;
    11f8:	b2 50 00 10 	add	#4096,	&0x0172	;#0x1000
    11fc:	72 01 

  /* Figure out how fast the DCO is running */
  if( t < MIN_DCO_TIME )
    11fe:	3f 90 f7 73 	cmp	#29687,	r15	;#0x73f7
    1202:	06 2c       	jc	$+14     	;abs 0x1210
  {
    /* The DCO is running too slow */
    if( DCOCTL < 0xFF )
    1204:	f2 93 56 00 	cmp.b	#-1,	&0x0056	;r3 As==11
    1208:	0d 24       	jz	$+28     	;abs 0x1224
    {
      DCOCTL += 1;
    120a:	d2 53 56 00 	inc.b	&0x0056		;
    120e:	0a 3c       	jmp	$+22     	;abs 0x1224
    }
  } else if( t > MAX_DCO_TIME ) {
    1210:	3f 90 2d 80 	cmp	#-32723,r15	;#0x802d
    1214:	06 28       	jnc	$+14     	;abs 0x1222
    /* The DCO is running too fast */
    if( DCOCTL > 0 )
    1216:	c2 93 56 00 	cmp.b	#0,	&0x0056	;r3 As==00
    121a:	04 24       	jz	$+10     	;abs 0x1224
    {
      DCOCTL -= 1;
    121c:	f2 53 56 00 	add.b	#-1,	&0x0056	;r3 As==11
    1220:	01 3c       	jmp	$+4      	;abs 0x1224
    }
  } else {
    asm("  nop");
    1222:	03 43       	nop			
  }

  /* Clear and restart Timer B */
  TBCTL |= TBCLR;
    1224:	a2 d2 80 01 	bis	#4,	&0x0180	;r2 As==10
  TBCTL |= MC_CONT;
    1228:	b2 d0 20 00 	bis	#32,	&0x0180	;#0x0020
    122c:	80 01 
}
    122e:	3f 41       	pop	r15		;
    1230:	00 13       	reti			

00001232 <INT_adc>:

interrupt (ADC_VECTOR) INT_adc( void )
{
    1232:	00 13       	reti			

00001234 <INT_uart0tx>:
}

interrupt (UART0TX_VECTOR) INT_uart0tx( void )
{
    1234:	00 13       	reti			

00001236 <INT_uart0rx>:
}

interrupt (UART0RX_VECTOR) INT_uart0rx( void )
{
    1236:	00 13       	reti			

00001238 <INT_wdt>:
}

interrupt (WDT_VECTOR) INT_wdt( void )
{
    1238:	00 13       	reti			

0000123a <INT_compa>:
}

interrupt (COMPARATORA_VECTOR) INT_compa( void )
{
    123a:	00 13       	reti			

0000123c <INT_timerb1>:
}

interrupt (TIMERB1_VECTOR) INT_timerb1( void )
{
    123c:	00 13       	reti			

0000123e <INT_timerb0>:
}

interrupt (TIMERB0_VECTOR) INT_timerb0( void )
{
    123e:	00 13       	reti			

00001240 <INT_nmi>:
}

interrupt (NMI_VECTOR) INT_nmi( void )
{
    1240:	00 13       	reti			

00001242 <__stop_progExec__>:
    1242:	0f 12       	push	r15		;
    1244:	3f 41       	pop	r15		;

00001246 <__stop_progLoop>:
    1246:	02 df       	bis	r15,	r2	;
    1248:	fe 3f       	jmp	$-2      	;abs 0x1246
Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	3a 11 e2 11 e4 11 e6 11 e8 11 ea 11 ec 11 32 12     :.............2.
    fff0:	34 12 36 12 38 12 3a 12 3c 12 3e 12 40 12 00 11     4.6.8.:.<.>.@...
